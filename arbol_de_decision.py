# -*- coding: utf-8 -*-
"""Arboles de Decision Codigo Maquina.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o9AV0MehPnZM0rXMdi5VFmXzrYVl3K3c

Ejercicio Áboles de Decision

https://www.youtube.com/watch?v=z5rmY-LV7ME&t=541s

Hay nodos de decisión y nodos terminales o clase. Es un conjunto de reglas (si-entonces). Es una técnica no paramétrica, no hace suposiciones con relación a la distribución de los datos.<br>
**Entropia:** Promedio de información almacenada  en una variable aleatoria.
"""

import pandas as pd
import matplotlib.pyplot as plt

pacientes = pd.read_csv("pacientes.csv")

pacientes.head()

"""# Gráfica de dispersión: Edad y Colesterol"""

saludables = pacientes[pacientes['problema_cardiaco'] == 0]
cardiacos = pacientes[pacientes['problema_cardiaco'] == 1]

plt.figure(figsize = (6, 6))
plt.xlabel('Edad', fontsize = 20.0)
plt.ylabel('Colesterol', fontsize = 20.0)
plt.scatter(saludables['edad'], saludables['colesterol'],
            label = 'Saludable (Clase: 0)', marker = "*", c = 'skyblue', s = 200)
plt.scatter(cardiacos['edad'], cardiacos['colesterol'],
            label = 'Saludable (Clase: 1)', marker = "*", c = 'lightcoral', s = 200)
plt.legend(bbox_to_anchor = (1, 0.15))
plt.show()

"""Entropía: promedio de información almacenada en una variable aleatoria."""

from scipy.stats import entropy
from math import log

"""# Datos de entrenamiento y Prueba"""

from sklearn.model_selection import train_test_split

datos_entrena, datos_prueba, clase_entrena, clase_prueba = train_test_split(
    pacientes[['edad', 'colesterol']],
    pacientes['problema_cardiaco'],
    test_size = 0.30)

"""# Creación Árbol de Decisión"""

from sklearn import tree
nombres_caracteristicas = ['Edad', 'Colesterol']
arbol_decision = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = 2)

arbol = arbol_decision.fit(datos_entrena, clase_entrena)

accuracy = arbol_decision.score(datos_prueba, clase_prueba)
print('Accuracy: ', accuracy)
print(tree.export_text(arbol, feature_names = nombres_caracteristicas))

plt.figure(figsize = (12, 6))
tree.plot_tree(arbol, feature_names = nombres_caracteristicas, filled=True, rounded=True)
plt.show()

"""# Clasifica a nuevos pacientes"""

print('Nuevo paciente', arbol_decision.predict([[70, 150]]))

